{
  "name": "$flowName",
  "displayName": "$flowName",
  "owner": "$flowName",
  "databricksToken": "$databricksToken",
  "input": {
    "mode": "streaming",
    "type": "$eventHubType",
    "properties": {
      "inputEventhubName": "$eventHubName",
      "inputEventhubConnection": "$eventHubConnection",
      "windowDuration": "60",
      "timestampColumn": "eventTimeStamp",
      "watermarkValue": "60",
      "watermarkUnit": "second",
      "maxRate": "30000",
      "inputSchemaFile": "{\"type\":\"struct\",\"fields\":[{\"name\":\"deviceDetails\",\"type\":{\"type\":\"struct\",\"fields\":[{\"name\":\"deviceId\",\"type\":\"long\",\"nullable\":true,\"metadata\":{}},{\"name\":\"deviceType\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}},{\"name\":\"eventTime\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}},{\"name\":\"homeId\",\"type\":\"long\",\"nullable\":true,\"metadata\":{}},{\"name\":\"status\",\"type\":\"long\",\"nullable\":true,\"metadata\":{}}]},\"nullable\":true,\"metadata\":{}}]}",
      "showNormalizationSnippet": false,
      "normalizationSnippet": "SystemProperties AS _SystemProperties\r\nProperties AS _Properties\r\nstringToTimestamp(Raw.deviceDetails.eventTime) AS eventTimeStamp\r\nRaw.*",
      "inputSubscriptionId": "",
      "inputResourceGroup": ""
    },
    "referenceData": [
      {
        "id": "myDevicesRefData",
        "type": "csv",
        "typeDisplay": "CSV/TSV File",
        "properties": {
          "path": "$referenceDataUri",
          "delimiter": ",",
          "header": true
        }
      }
    ],
    "batch": null
  },
  "process": {
    "timestampColumn": "eventTimeStamp",
    "watermark": "60 second",
    "functions": [
      {
        "id": "whoOpened",
        "type": "jarUDF",
        "properties": {
          "name": null,
          "path": "$udfSampleUri",
          "class": "datax.sample.udf.UdfHelloWorld",
          "libs": []
        },
        "typeDisplay": "UDF"
      }
    ],
    "queries": [
      "--DataXStates--\nCREATE TABLE scenariotest_GarageDoor_status_accumulated\n    (deviceId long, deviceType string, homeId long, EventTime Timestamp, Reading long);\n \n--DataXQuery--\nDeviceWindowedInput = SELECT \n                        deviceDetails.deviceId,\n                        deviceDetails.deviceType,\n                        eventTimeStamp,\n                        deviceDetails.homeId,\n                        deviceDetails.status\n                    FROM DataXProcessedInput \n                    TIMEWINDOW('5 minutes')\n                   GROUP BY deviceId, deviceType, eventTimeStamp, homeId, status;\n\n--DataXQuery--\nDeviceNotWindowedInputWithName = SELECT \n                        DataXProcessedInput.deviceDetails.deviceId,\n                        DataXProcessedInput.deviceDetails.deviceType,\n                        eventTimeStamp,\n                        DataXProcessedInput.deviceDetails.homeId,\n                        DataXProcessedInput.deviceDetails.status,\n                        myDevicesRefdata.deviceName\n                    FROM DataXProcessedInput \n                    JOIN myDevicesRefdata \n                    ON DataXProcessedInput.deviceDetails.deviceId = myDevicesRefdata.deviceId \n                    AND DataXProcessedInput.deviceDetails.homeId = myDevicesRefdata.homeId;\n\n--DataXQuery--\nDeviceNotWindowedInputWithNameAndWho = SELECT \n                        deviceId,\n                        deviceType,\n                        eventTimeStamp,\n                        homeId,\n                        status,\n                        deviceName,\n                        whoOpened(CAST(deviceId AS String)) AS whoOpened\n                    FROM DeviceNotWindowedInputWithName; \n \n--DataXQuery--\nDeviceInfoTimeWindow = SELECT \n                    deviceId,\n                    deviceType,\n                    homeId,\n                    MAX(eventTimeStamp) AS MaxEventTime,\n                    MIN(status) AS MinReading,\n                    MAX(status) AS MaxReading\n                FROM DeviceWindowedInput\n                GROUP BY deviceId, deviceType, homeId;\n\n--DataXQuery--\nHeaterStateFiltered = SELECT \n                        eventTimeStamp,\n                        deviceDetails.deviceId,\n                        deviceDetails.deviceType,\n                        deviceDetails.homeId,\n                        deviceDetails.status\n\t\t\t\t\tFROM DataXProcessedInput\n\t\t\t\t\tWHERE deviceDetails.homeId = 150\n\t\t\t\t\t\tAND deviceDetails.deviceType = 'Heating'\n\t\t\t\t\tGROUP BY eventTimeStamp, deviceId, deviceType, homeId, status;\n\n--DataXQuery--\nHeaterStateOneIsOn = CreateMetric(HeaterStateFiltered, status);\n\n--DataXQuery--\nWindowLockStateFiltered = SELECT \n                                eventTimeStamp,\n                                deviceDetails.deviceId,\n                                deviceDetails.deviceType,\n                                deviceDetails.homeId,\n                                deviceDetails.status\n\t\t\t\t\t\t\tFROM DataXProcessedInput\n\t\t\t\t\t\t\tWHERE deviceDetails.homeId = 150\n\t\t\t\t\t\t\t\tAND deviceDetails.deviceType = 'WindowLock'\n\t\t\t\t\t\t\tGROUP BY eventTimeStamp, deviceId, deviceType, homeId, status;\n                    \n--DataXQuery--\nWindowLockStateOneIsLocked =  CreateMetric(WindowLockStateFiltered, status);\n\n--DataXQuery--\nWindowLockWindowedFiltered = SELECT *\n\t\t\t\t\t\t\tFROM DeviceInfoTimeWindow\n\t\t\t\t\t\t\tINNER JOIN WindowLockStateFiltered ON WindowLockStateFiltered.eventTimeStamp = DeviceInfoTimeWindow.MaxEventTime\n\t\t\t\t\t\t\tWHERE DeviceInfoTimeWindow.homeId = 150\n\t\t\t\t\t\t\t\tAND DeviceInfoTimeWindow.deviceType = 'WindowLock';\n\n--DataXQuery--\nWindowLockStateWindowed = CreateMetric(WindowLockWindowedFiltered, MaxReading);\n\n--DataXQuery--\nWindowOpenFiveMin = SELECT\n                        MaxEventTime,\n                        MaxReading\n                    FROM DeviceInfoTimeWindow\n                    INNER JOIN WindowLockStateFiltered ON WindowLockStateFiltered.eventTimeStamp = DeviceInfoTimeWindow.MaxEventTime\n                    WHERE DeviceInfoTimeWindow.homeId = 150\n                        AND DeviceInfoTimeWindow.MaxReading = 0\n                        AND DeviceInfoTimeWindow.deviceType = 'WindowLock';\n\t\t\t\t\t\t\n--DataXQuery--\nWindowOpenFiveMinWhileHeaterOnCombinedAlert = SELECT\n                                    MaxEventTime AS EventTime,\n                                    'WindowOpenFiveMinWhileHeaterOnCombinedAlert' AS MetricName,\n                                    0 AS Metric,\n                                    'scenariotest' AS Product, \n                                    'Window open for 5+ minutes while heater is on.' AS Pivot1\n                                FROM WindowOpenFiveMin\n                                INNER JOIN HeaterStateFiltered ON HeaterStateFiltered.eventTimeStamp = WindowOpenFiveMin.MaxEventTime\n                                WHERE WindowOpenFiveMin.MaxReading = 0\n                                    AND HeaterStateFiltered.status = 1;\n\n--DataXQuery--\nDoorLockStatusFiltered = SELECT *\n\t\t\t\t\t\tFROM DataXProcessedInput\n\t\t\t\t\t\tWHERE deviceDetails.homeId = 150                  \n\t\t\t\t\t\t\tAND deviceDetails.deviceType = 'DoorLock';\n\n--DataXQuery--\nDoorLockStatusOneForLocked =  CreateMetric(DoorLockStatusFiltered, deviceDetails.status);\n\n--DataXQuery--\nDoorUnlockedSimpleAlert = SELECT DISTINCT\n                        eventTimeStamp AS EventTime,\n                        'DoorUnlockedSimpleAlert' AS MetricName,\n                        0 AS Metric,\n                        'scenariotest' AS Product, \n                        CONCAT('Door unlocked: ', deviceName, ' at home ', homeId) AS Pivot1\n                        FROM DeviceNotWindowedInputWithNameAndWho\n                        WHERE deviceType = 'DoorLock' AND\n                        homeId = 150 AND\n                        status = 0;\n\n--DataXQuery--\nGarageDoorStatusFiltered = SELECT \n\t\t\t\t\t\t\teventTimeStamp,\n\t\t\t\t\t\t\tdeviceDetails.deviceId,\n\t\t\t\t\t\t\tdeviceDetails.deviceType,\n\t\t\t\t\t\t\tdeviceDetails.homeId,\n\t\t\t\t\t\t\tdeviceDetails.status\n\t\t\t\t\t\tFROM DataXProcessedInput\n\t\t\t\t\t\tWHERE deviceDetails.homeId = 150\n\t\t\t\t\t\t\tAND deviceDetails.deviceType = 'GarageDoorLock'\n\t\t\t\t\t\tGROUP BY eventTimeStamp, deviceId, deviceType, homeId, status;\n\n--DataXQuery--\nGarageDoorStatusOneForLocked = CreateMetric(GarageDoorStatusFiltered, status);\n\n--DataXQuery--\nGarageDoorAccumalator = SELECT \n                            deviceId,\n                            deviceType,\n                            homeId,\n                            eventTimeStamp AS EventTime,\n                            status AS Reading\n                        FROM DeviceNotWindowedInputWithName\n                        WHERE homeId = 150\n                            AND deviceType = 'GarageDoorLock'\n                        UNION ALL\n                        SELECT \n                            deviceId,\n                            deviceType,\n                            homeId,\n                            EventTime,\n                            Reading\n                        FROM scenariotest_GarageDoor_status_accumulated\n                        WHERE hour(EventTime) = hour(current_timestamp());\n\n--DataXQuery--\nscenariotest_GarageDoor_status_accumulated = SELECT deviceId, deviceType, homeId, EventTime, Reading\nFROM GarageDoorAccumalator;\n\n--DataXQuery--\nGarageDoorOpenInAnHour = SELECT COUNT(DISTINCT EventTime) AS MinsGarageOpenedInHour,\n                                    MAX(EventTime) AS EventTime\n                                FROM scenariotest_GarageDoor_status_accumulated\n                                WHERE homeId = 150\n                                    AND deviceType = 'GarageDoorLock'\n                                    AND Reading = 0\n                                    AND unix_timestamp() - to_unix_timestamp(EventTime,'yyyy-MM-dd') < 3600;\n\n--DataXQuery--\nGarageDoorMinutesOpenedFiltered = SELECT\n\t\t\t\t\t\t\t\t\t\t\tMAX(eventTimeStamp) AS EventTime,\n\t\t\t\t\t\t\t\t\t\t\tCOUNT(DISTINCT eventTimeStamp) AS MinutesCount\n\t\t\t\t\t\t\t\t\t\tFROM DeviceWindowedInput\n\t\t\t\t\t\t\t\t\t\tWHERE homeId = 150\n\t\t\t\t\t\t\t\t\t\t\tAND deviceType = 'GarageDoorLock'\n\t\t\t\t\t\t\t\t\t\t\tAND status = 0;\n\n--DataXQuery--\nGarageDoorMinutesOpenedIn5minutes = CreateMetric(GarageDoorMinutesOpenedFiltered, MinutesCount);\n\n--DataXQuery--\nGarageOpenForFiveMinsWindowAlert = SELECT\n                                EventTime AS EventTime,\n                                'GarageOpenForFiveMinsWindowAlert' AS MetricName,\n                                0 AS Metric,\n                                'scenariotest' AS Product, \n                                'Garage door opened for >=5 mins' AS Pivot1\n                                FROM GarageDoorMinutesOpenedIn5minutes\n                                WHERE Metric >= 5;\n\n--DataXQuery--\nGarageMinutesOpenedInAnHour = CreateMetric(GarageDoorOpenInAnHour, MinsGarageOpenedInHour);\n\n--DataXQuery--\nGarageOpenFor30MinutesInHourThresholdAlert = SELECT \n                                EventTime AS EventTime,\n                                'GarageOpenFor30MinutesInHourThresholdAlert' AS MetricName,\n                                0 AS Metric,\n                                'scenariotest' AS Product, \n                                CONCAT('Garage door opened for >= 30 minutes in last hour: ', Metric) AS Pivot1\n                                FROM GarageMinutesOpenedInAnHour\n                                WHERE Metric >= 30;\n\n--DataXQuery--\nRules = ProcessRules(DataXProcessedInput);\n\nOUTPUT DoorLockStatusOneForLocked TO Metrics;\nOUTPUT DoorUnlockedSimpleAlert TO Metrics;\nOUTPUT GarageDoorStatusOneForLocked, GarageDoorMinutesOpenedIn5minutes, GarageMinutesOpenedInAnHour TO Metrics;\nOUTPUT GarageOpenForFiveMinsWindowAlert TO Metrics;\nOUTPUT GarageOpenFor30MinutesInHourThresholdAlert TO Metrics;\nOUTPUT HeaterStateOneIsOn, WindowLockStateOneIsLocked, WindowLockStateWindowed TO Metrics;\nOUTPUT WindowOpenFiveMinWhileHeaterOnCombinedAlert TO Metrics;"
    ],
    "jobconfig": {
      "jobNumExecutors": "4",
      "jobExecutorMemory": "1024",
      "jobDatabricksAutoScale": true,
      "jobDatabricksMinWorkers": "1",
      "jobDatabricksMaxWorkers": "8"
    }
  },
  "outputs": [
    {
      "id": "Metrics",
      "type": "metric",
      "properties": {},
      "typeDisplay": "Metrics"
    }
  ],
  "outputTemplates": [],
  "rules": [
    {
      "id": "DoorLock Close",
      "type": "tag",
      "properties": {
        "$productId": "scenariotest",
        "$ruleType": "SimpleRule",
        "$ruleId": "a27cbfd7-3122-45a7-8d9f-338d91ade5c2",
        "$ruleDescription": "DoorLock Close",
        "$condition": "deviceDetails.deviceType = 'DoorLock' AND deviceDetails.status = 1",
        "$tagName": "Tag",
        "$tag": "CLOSE",
        "$aggs": [],
        "$pivots": [],
        "$isAlert": true,
        "$severity": "Critical",
        "$alertSinks": [
          "Metrics"
        ],
        "$outputTemplate": "",
        "schemaTableName": "DataXProcessedInput",
        "conditions": {
          "type": "group",
          "conjunction": "or",
          "conditions": [
            {
              "type": "condition",
              "conjunction": "or",
              "aggregate": "AVG",
              "field": "deviceDetails.deviceType",
              "operator": "stringEqual",
              "value": "DoorLock"
            },
            {
              "type": "condition",
              "conjunction": "and",
              "aggregate": "AVG",
              "field": "deviceDetails.status",
              "operator": "equal",
              "value": "1"
            }
          ]
        }
      }
    },
    {
      "id": "DoorLock Open",
      "type": "tag",
      "properties": {
        "$productId": "scenariotest",
        "$ruleType": "SimpleRule",
        "$ruleId": "a9a19252-d27e-4583-b59b-bf3ee80eb313",
        "$ruleDescription": "DoorLock Open",
        "$condition": "deviceDetails.deviceType = 'DoorLock' AND deviceDetails.status = 0 AND deviceDetails.homeId = 150",
        "$tagName": "Tag",
        "$tag": "OPEN",
        "$aggs": [],
        "$pivots": [],
        "$isAlert": false,
        "$severity": "Critical",
        "$alertSinks": [
          "Metrics"
        ],
        "$outputTemplate": "",
        "schemaTableName": "DataXProcessedInput",
        "conditions": {
          "type": "group",
          "conjunction": "or",
          "conditions": [
            {
              "type": "condition",
              "conjunction": "or",
              "aggregate": "AVG",
              "field": "deviceDetails.deviceType",
              "operator": "stringEqual",
              "value": "DoorLock"
            },
            {
              "type": "condition",
              "conjunction": "and",
              "aggregate": "AVG",
              "field": "deviceDetails.status",
              "operator": "equal",
              "value": "0"
            },
            {
              "type": "condition",
              "conjunction": "and",
              "aggregate": "AVG",
              "field": "deviceDetails.homeId",
              "operator": "equal",
              "value": "150"
            }
          ]
        }
      }
    }
  ],
  "batchList": [],
  "subscription": "$subscriptionId"
}